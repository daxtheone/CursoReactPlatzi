1 => Git Init
2 => npm init -y 
    La 'y' singnifica que va a preconfigurar el documento

3 => Creamos la estructura
    3.1 =>  /src
    3.2 =>  /public
    3.3 => Dentro de src creamos /components
    3.4 => Dentro de src creamos index.js (Entrada al proyecto)
    3.5 => Dentro de public crear index.html

4 => Instalamos react y react-dom
    npm install react react-dom
    
5 => podemos crear nuestro primer componenente de prueba
    ./components/HelloWorld

        import React from 'react'
        const HelloWorld = () => {
            <h1>Hola Mundo</h1>
        }
        export default HelloWorld

6 => Le damos acceso al sistema en index.js
    import React from 'react'
    import ReactDOM from 'react-dom'
    import HelloWorld from './components/HelloWorld'
    ReactDOM.render(<HelloWorld/> ,document.getElementById('app'))

7 => Accedemos al public/index.html  para crear la estructura html y agregar el div id=app

8 => Instalamos babel  (Para hacer compatible todos los ecma script a todos los navegadores)
    npm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader

9 => Creamos el archivo .babelrc en la raiz
    {
        "presets": [
            "@babel/preset-env", // para los ecmas
            "@babel/preset-react" // para react
        ]
    }

10 => Instalamos, configuramos y ejecutamos webpack
    npm install webpack webpack-cli html-webpack-plugin html-loader  --save-dev

    10.1 => creamos el archivo webpack.config.js

        const path = require('path');
        const HtmlWebPackPlugin = require('html-webpack-plugin');

        module.exports = {
            entry: './src/index.js',
            output: {
                path: path.resolve(__dirname,'dist'),
                filename: 'bundle.js'
            },
            resolve: {
                extensions: ['.js','.jsx']
            },
            module: {
                rules: [
                    {
                        test: /\.(js|jsx)$/,
                        exclude: /node_modules/,
                        use: {
                            loader: "babel-loader"
                        }
                    },
                    {
                        test: /\.html$/,
                        use: [
                            {
                                loader: 'html-loader'
                            }
                        ]
                    }
                ]
            },
            plugins: [
                new HtmlWebPackPlugin({
                    template: './public/index.html',
                    filename: './index.html'
                })
            ]
        }



    10.2 => En el archivo package.json agregamos el script
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "build": "webpack --mode production" 
        },

    10.3 => Ejecutamos en consola 
        npm run build

    10.4 => Instalamos el server de webpack
        npm install --save-dev webpack-dev-server
    
    10.5 => En package.json 
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "build": "webpack --mode production",
            "start": "webpack serve --mode development --env development"
        },

    10.6 => Ejecutamos 
        npm run start

11 => Vamos a instalar preprocesador SASS
    npm install --save-dev mini-css-extract-plugin css-loader node-sass sass-loader

    11.1 => En Webpack.config.js añadimos una nueva regla

        const path = require('path');
        const HtmlWebPackPlugin = require('html-webpack-plugin');
        const MiniCssExtractPlugin = require('mini-css-extract-plugin');

        module.exports = {
            entry: './src/index.js',
            output: {
                path: path.resolve(__dirname,'dist'),
                filename: 'bundle.js'
            },
            resolve: {
                extensions: ['.js','.jsx']
            },
            module: {
                rules: [
                    {
                        test: /\.(js|jsx)$/,
                        exclude: /node_modules/,
                        use: {
                            loader: "babel-loader"
                        }
                    },
                    {
                        test: /\.html$/,
                        use: [
                            {
                                loader: 'html-loader'
                            }
                        ]
                    },
                    {
                        test: /\.(s*)css$/,
                        use: [
                            {
                                loader: MiniCssExtractPlugin.loader,
                            },
                            'css-loader',
                            'sass-loader'
                        ]
                    }
                ]
            },
            plugins: [
                new HtmlWebPackPlugin({
                    template: './public/index.html',
                    filename: './index.html'
                }),
                new MiniCssExtractPlugin({
                    filename: 'assets/[name].css'
                })
            ]
        }
    
    11.2 => En ./src Creamos la carpteta assets y dentro de ella styles
    11.3 => Creamos App.scss en styles
        Lo pruebo
            body {
                margin: 0;
                background-color: blueviolet;
            }
    11.4 En mi componente hola mundo jsx agrego el import
        import '../assets/styles/App.scss'
        npm run start

12 => instalaremos Eslint Herramienta para validar el código y tener un standar

    npm install --save-dev eslint babel-eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y

    npx eslint --init

    12.1 => Creamos en la raiz el archivo .eslintrc y el contenido lo traemos de =>

    https://gist.githubusercontent.com/gndx/60ae8b1807263e3a55f790ed17c4c57a/raw/0de495fc84df71ce97ef87c37505362f3512e1c3/eslintrc

13 => Creamos el archivo .gitignore

    https://gist.githubusercontent.com/gndx/747a8913d12e96ff8374e2125efde544/raw/2b46b6f7ecb03ebd4fc4eacde5796caf1b752d7d/gitignore

    git add . ; git commit -m "actualziacion"




14 =>  Ahora a componentizar



15 => Configuro el nombre de las imagenes y archivos

 npm install file-loader --save-dev

    15.1 => voy al archivo webpack.config
    const path = require('path');
const HtmlWebPackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = {
    entry: './src/index.js',
    output: {
        path: path.resolve(__dirname,'dist'),
        filename: 'bundle.js'
    },
    resolve: {
        extensions: ['.js','.jsx']
    },
    module: {
        rules: [
            {
                test: /\.(js|jsx)$/,
                exclude: /node_modules/,
                use: {
                    loader: "babel-loader"
                }
            },
            {
                test: /\.html$/,
                use: [
                    {
                        loader: 'html-loader'
                    }
                ]
            },
            {
                test: /\.(s*)css$/,
                use: [
                    {
                        loader: MiniCssExtractPlugin.loader,
                    },
                    'css-loader',
                    'sass-loader'
                ]
            },
            {  
              test: /\.(png|gif|jpg|jpeg)/,
              use:[
                  {
                      'loader': 'file-loader',
                      options: {
                          name: 'assets/[hash].[ext]'
                      }
                  }
              ]
            }
        ]
    },
    plugins: [
        new HtmlWebPackPlugin({
            template: './public/index.html',
            filename: './index.html'
        }),
        new MiniCssExtractPlugin({
            filename: 'assets/[name].css'
        })
    ],
}

16. => creo la carpeta assets/estatic para agregar las imagenes


17. => Creamos nuestro  Json server para simular un api

    17.1 => Creamos el archivo initialState.json con el contenido del gist 
        https://gist.githubusercontent.com/gndx/d4ca4739450afaa614efe4570ac362ee/raw/65755bd20783b1fba5f4a4b40dac10a15cb724b4/initalState.json

    17.2 => sudo npm install json-server -g

    17.3 => json-server initialState.json

18 => Especificar qué tipo de elementos son nuestras props:
    18.1 => npm install prop-types

    18.2 => Editamos carosuelItem

        import React from 'react';
        import PropTypes from 'prop-types';

        const Component = ({ name, lastName, age, list }) => {
        // ...
        };

        Component.propTypes = {
        name: PropTypes.string,
        lastName: PropTypes.string,
        age: PropTypes.number,
        list: PropTypes.array,
        };

        export default Component;
    
    18.3
        podemos establecer cual es obligatorio   name: PropTypes.string.isRequired, // obligatorio


19 => React hooks para llamar api

        import { useState, useEffect } from 'react';

        const useInitialState = (API) => {
        const [videos, setVideos] = useState([]);
        useEffect(() => {
            fetch(API)
            .then((response) => response.json())
            .then((data) => {
                setTimeout(() => setVideos(data), 15000); //el settimeout solo para probar
            });
        }, []);
        return videos;
        };

        export default useInitialState;


20 => Interesante convertirlo en async await https://www.robinwieruch.de/react-hooks-fetch-data
21 => si deseo usar axios https://github.com/axios/axios





*************************************** REACT ROUTER  ************************************

1 =>  npm install react-router-dom --save

2 => Creamos la carpeta src/routes

        import React from 'react';
        import { BrowserRouter, Route } from 'react-router-dom';
        import Home from '../containers/Home';

        const App = () => (
        <BrowserRouter>
            <Route exact path='/' component={Home} />
        </BrowserRouter>
        );

        export default App;

3 => Cambiamos el nombre de containers/app a containers/home para que no haya choque

4 => Modificamos index.js para que inicie desde el router

    import React from 'react';
    import ReactDOM from 'react-dom';
    //import HelloWorld from './components/HelloWorld';
    import App from './routes/App';

    ReactDOM.render(<App />, document.getElementById('app'));

5=> Podemos incorporar mas rutas

    import React from 'react';
    import { BrowserRouter, Route } from 'react-router-dom';
    import Home from '../containers/Home';
    import Login from '../containers/Login';

    const App = () => (
    <BrowserRouter>
        <Route exact path='/' component={Home} />
        <Route exact path='/login' component={Login} />
    </BrowserRouter>
    );

    export default App;


    5.2 => Pero para que se vea hay que actualizar el webpack  =>devServer
        const path = require('path');
        const HtmlWebPackPlugin = require('html-webpack-plugin');
        const MiniCssExtractPlugin = require('mini-css-extract-plugin');

        module.exports = {
            entry: './src/index.js',
            output: {
                path: path.resolve(__dirname,'dist'),
                filename: 'bundle.js'
            },
            resolve: {
                extensions: ['.js','.jsx']
            },
            module: {
                rules: [
                    {
                        test: /\.(js|jsx)$/,
                        exclude: /node_modules/,
                        use: {
                            loader: "babel-loader"
                        }
                    },
                    {
                        test: /\.html$/,
                        use: [
                            {
                                loader: 'html-loader'
                            }
                        ]
                    },
                    {
                        test: /\.(s*)css$/,
                        use: [
                            {
                                loader: MiniCssExtractPlugin.loader,
                            },
                            'css-loader',
                            'sass-loader'
                        ]
                    },
                    {  
                    test: /\.(png|gif|jpg|jpeg)/,
                    use:[
                        {
                            'loader': 'file-loader',
                            options: {
                                name: 'assets/[hash].[ext]'
                            }
                        }
                    ]
                    }
                ]
            },
            devServer: {
                historyApiFallback: true,
            },
            plugins: [
                new HtmlWebPackPlugin({
                    template: './public/index.html',
                    filename: './index.html'
                }),
                new MiniCssExtractPlugin({
                    filename: 'assets/[name].css'
                })
            ],
        }

6=> Agrego Switch a mi app.js (de router)


    import React from 'react';
    import { BrowserRouter, Switch, Route } from 'react-router-dom';
    import Home from '../containers/Home';
    import Login from '../containers/Login';
    import Register from '../containers/Register';

    const App = () => (
    <BrowserRouter>
        <Switch>
        <Route exact path='/' component={Home} />
        <Route exact path='/login' component={Login} />
        <Route exact path='/register' component={Register} />
        </Switch>
    </BrowserRouter>
    );

    export default App;

7 => React.fragment
    <></>

8 => Para hacer links

    import { Link } from 'react-router-dom';
    <Link to='/'>
      <img className='header__img' src={logo} alt='logo-platzi' />
    </Link>



 ****************** REDUX ********************************

 1 => npm install redux react-redux --save
 2 => Creamos 2 carpetas actions y reducers  
      Dentro de ellas creamos sus archivos index.js

 3 => Modifico el archivo index.js de la aplicacion

        import React from 'react';
        import ReactDOM from 'react-dom';
        import { Provider } from 'react-redux';
        import { createStore } from 'redux';
        //import HelloWorld from './components/HelloWorld';
        import App from './routes/App';

        ReactDOM.render(
        <Provider>
            <App />
        </Provider>
        ,
        document.getElementById('app'),
        );
